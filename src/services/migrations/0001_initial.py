# Generated by Django 5.0.3 on 2024-04-03 08:28

import django.contrib.postgres.fields
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("users", "0003_alter_admin_username_alter_athlete_username_and_more"),
    ]

    operations = [
        migrations.CreateModel(
            name="Chat",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("chat_id", models.CharField(max_length=100)),
                ("chat_name", models.CharField(max_length=100)),
                (
                    "members",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=100), size=None
                    ),
                ),
            ],
            options={
                "db_table": "chat",
            },
        ),
        migrations.CreateModel(
            name="Verified",
            fields=[
                ("verify_id", models.IntegerField(primary_key=True, serialize=False)),
                ("status", models.BooleanField()),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("passed", "Passed"),
                            ("failed", "Failed"),
                        ]
                    ),
                ),
            ],
            options={
                "db_table": "verified",
            },
        ),
        migrations.CreateModel(
            name="Achievement",
            fields=[
                ("achievement", models.CharField(max_length=250, unique=True)),
                ("date", models.DateField(primary_key=True, serialize=False)),
                (
                    "username",
                    models.OneToOneField(
                        max_length=100,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="users.customuser",
                    ),
                ),
            ],
            options={
                "db_table": "achievement",
            },
        ),
        migrations.CreateModel(
            name="BlobStorage",
            fields=[
                ("blob_id", models.AutoField(primary_key=True, serialize=False)),
                ("content_type", models.CharField(max_length=30)),
                ("description", models.CharField(blank=True, max_length=30, null=True)),
                ("url", models.TextField(max_length=250)),
                ("file_name", models.CharField(max_length=100)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("uploaded", "Uploaded"),
                            ("failed", "Failed"),
                        ],
                        max_length=30,
                    ),
                ),
                ("file_size", models.IntegerField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("skill_type", models.CharField(blank=True, max_length=30, null=True)),
                (
                    "club_name",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="users.organization",
                    ),
                ),
                (
                    "username",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="users.customuser",
                    ),
                ),
            ],
            options={
                "db_table": "blob_storage",
            },
        ),
        migrations.CreateModel(
            name="Contact",
            fields=[
                (
                    "email",
                    models.CharField(max_length=50, primary_key=True, serialize=False),
                ),
                ("phone", models.CharField(max_length=10)),
                (
                    "username",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="users.customuser",
                    ),
                ),
            ],
            options={
                "db_table": "contact",
            },
        ),
        migrations.CreateModel(
            name="Event",
            fields=[
                ("event_id", models.AutoField(primary_key=True, serialize=False)),
                ("content", models.CharField(max_length=200)),
                ("created_at", models.DateTimeField()),
                (
                    "like",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.IntegerField(), default=list, size=None
                    ),
                ),
                (
                    "club",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="users.organization",
                    ),
                ),
            ],
            options={
                "db_table": "event",
            },
        ),
        migrations.CreateModel(
            name="Experience",
            fields=[
                (
                    "topic",
                    models.CharField(max_length=150, primary_key=True, serialize=False),
                ),
                ("date", models.DateField()),
                ("description", models.TextField()),
                (
                    "username",
                    models.OneToOneField(
                        max_length=100,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="users.customuser",
                    ),
                ),
            ],
            options={
                "db_table": "experience",
            },
        ),
        migrations.CreateModel(
            name="HaveProfilePic",
            fields=[
                (
                    "username",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        serialize=False,
                        to="users.customuser",
                    ),
                ),
                (
                    "profile_picture",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="services.blobstorage",
                    ),
                ),
            ],
            options={
                "db_table": "have_profilepic",
            },
        ),
        migrations.CreateModel(
            name="IsFriendOf",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("status", models.BooleanField()),
                (
                    "friend_user_id",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="friend_user_id",
                        to="users.customuser",
                    ),
                ),
                (
                    "user_id",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_id",
                        to="users.customuser",
                    ),
                ),
            ],
            options={
                "db_table": "is_friend_of",
            },
        ),
        migrations.CreateModel(
            name="Message",
            fields=[
                (
                    "message_id",
                    models.CharField(max_length=100, primary_key=True, serialize=False),
                ),
                ("timestamp", models.DateTimeField()),
                ("content", models.TextField()),
                ("sender_id", models.CharField(max_length=100)),
                (
                    "chat",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="services.chat"
                    ),
                ),
            ],
            options={
                "db_table": "message",
            },
        ),
        migrations.CreateModel(
            name="HaveAttachment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "attachment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="services.blobstorage",
                    ),
                ),
                (
                    "message_id",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="services.message",
                    ),
                ),
            ],
            options={
                "db_table": "have_attachment",
            },
        ),
        migrations.CreateModel(
            name="Notification",
            fields=[
                (
                    "notification_id",
                    models.AutoField(primary_key=True, serialize=False),
                ),
                ("content", models.TextField()),
                (
                    "type",
                    models.CharField(
                        choices=[("post", "Post"), ("friend_request", "Friend Request")]
                    ),
                ),
                (
                    "username",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="users.customuser",
                    ),
                ),
            ],
            options={
                "db_table": "notification",
            },
        ),
        migrations.CreateModel(
            name="PhysicalAttribute",
            fields=[
                ("date", models.DateTimeField(primary_key=True, serialize=False)),
                ("height", models.IntegerField()),
                ("speed", models.IntegerField()),
                ("fat_mass", models.DecimalField(decimal_places=2, max_digits=4)),
                ("muscle_mass", models.DecimalField(decimal_places=2, max_digits=4)),
                ("weight", models.DecimalField(decimal_places=1, max_digits=4)),
                (
                    "username",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="users.customuser",
                    ),
                ),
            ],
            options={
                "db_table": "physical_attribute",
            },
        ),
        migrations.AddField(
            model_name="blobstorage",
            name="physical_attribute",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="services.physicalattribute",
            ),
        ),
        migrations.CreateModel(
            name="Post",
            fields=[
                ("post_id", models.AutoField(primary_key=True, serialize=False)),
                ("created_at", models.DateTimeField()),
                ("description", models.TextField()),
                (
                    "like",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.IntegerField(), default=list, size=None
                    ),
                ),
                (
                    "username",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="users.customuser",
                    ),
                ),
            ],
            options={
                "db_table": "post",
            },
        ),
        migrations.CreateModel(
            name="Comment",
            fields=[
                ("comment_id", models.AutoField(primary_key=True, serialize=False)),
                ("date", models.DateField()),
                ("like", models.JSONField(null=True)),
                ("description", models.CharField(max_length=200)),
                (
                    "username",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="users.customuser",
                    ),
                ),
                (
                    "post",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="services.post"
                    ),
                ),
            ],
            options={
                "db_table": "comment",
            },
        ),
        migrations.AddField(
            model_name="blobstorage",
            name="post",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="services.post",
            ),
        ),
        migrations.CreateModel(
            name="Owns",
            fields=[
                (
                    "chat_id",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        serialize=False,
                        to="services.chat",
                    ),
                ),
                (
                    "username",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="users.customuser",
                    ),
                ),
            ],
            options={
                "db_table": "owns",
            },
        ),
        migrations.CreateModel(
            name="IsVerified",
            fields=[
                (
                    "verify_id",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        serialize=False,
                        to="services.verified",
                    ),
                ),
                (
                    "username",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="users.customuser",
                    ),
                ),
            ],
            options={
                "db_table": "is_verified",
            },
        ),
        migrations.AddField(
            model_name="blobstorage",
            name="verify",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="services.isverified",
            ),
        ),
    ]
